<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="df/d06/toy__memory_8h" kind="file" language="C++">
    <compoundname>toy_memory.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="d7/d1d/toy__common_8h" local="yes">toy_common.h</includes>
    <incdepgraph>
      <node id="3">
        <label>toy_common.h</label>
        <link refid="d7/d1d/toy__common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>toy_memory.h</label>
        <link refid="df/d06/toy__memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="df/d06/toy__memory_8h_1a5103fc09a75cfe9b11580100571757bc" prot="public" static="no">
        <name>TOY_GROW_CAPACITY</name>
        <param><defname>capacity</defname></param>
        <initializer>((capacity) &lt; 8 ? 8 : (capacity) * 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="14" column="9" bodyfile="common/include/toy_memory.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1aa255fcaf2ed9642dd5503b92da1f2f45" prot="public" static="no">
        <name>TOY_GROW_CAPACITY_FAST</name>
        <param><defname>capacity</defname></param>
        <initializer>((capacity) &lt; 32 ? 32 : (capacity) * 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="15" column="9" bodyfile="common/include/toy_memory.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1aec8eb367118ebd6cdd8551c81dace6e1" prot="public" static="no">
        <name>TOY_ALLOCATE</name>
        <param><defname>type</defname></param>
        <param><defname>count</defname></param>
        <initializer>((type*)<ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>(NULL, 0, sizeof(type) * (count)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="17" column="9" bodyfile="common/include/toy_memory.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1a2c7739cb5a5e6d4a2df3207da8203bce" prot="public" static="no">
        <name>TOY_FREE</name>
        <param><defname>type</defname></param>
        <param><defname>pointer</defname></param>
        <initializer><ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>(pointer, sizeof(type), 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="19" column="9" bodyfile="common/include/toy_memory.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1ad1a23caf7219fa2bf9c8387ae82eb8df" prot="public" static="no">
        <name>TOY_FREE_ARRAY</name>
        <param><defname>type</defname></param>
        <param><defname>pointer</defname></param>
        <param><defname>oldCount</defname></param>
        <initializer><ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>((type*)pointer, sizeof(type) * (oldCount), 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="20" column="9" bodyfile="common/include/toy_memory.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1aa84157a1ad3853e02634aa83212bb8a4" prot="public" static="no">
        <name>TOY_GROW_ARRAY</name>
        <param><defname>type</defname></param>
        <param><defname>pointer</defname></param>
        <param><defname>oldCount</defname></param>
        <param><defname>count</defname></param>
        <initializer>(type*)<ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>((type*)pointer, sizeof(type) * (oldCount), sizeof(type) * (count))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="22" column="9" bodyfile="common/include/toy_memory.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="df/d06/toy__memory_8h_1a42acc49eb6e695081e06d7cb9bd31cac" prot="public" static="no">
        <name>TOY_SHRINK_ARRAY</name>
        <param><defname>type</defname></param>
        <param><defname>pointer</defname></param>
        <param><defname>oldCount</defname></param>
        <param><defname>count</defname></param>
        <initializer>(type*)<ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>((type*)pointer, sizeof(type) * (oldCount), sizeof(type) * (count))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="23" column="9" bodyfile="common/include/toy_memory.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="df/d06/toy__memory_8h_1a2335482fb6faca377476f53578dc29c5" prot="public" static="no">
        <type>void *(*</type>
        <definition>void *(* Toy_MemoryAllocatorFn)(void *pointer, size_t oldSize, size_t newSize)</definition>
        <argsstring>)(void *pointer, size_t oldSize, size_t newSize)</argsstring>
        <name>Toy_MemoryAllocatorFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="45" column="9" bodyfile="common/include/toy_memory.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API void *</type>
        <definition>void * Toy_reallocate</definition>
        <argsstring>(void *pointer, size_t oldSize, size_t newSize)</argsstring>
        <name>Toy_reallocate</name>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>oldSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="34" column="14" declfile="common/include/toy_memory.h" declline="34" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="df/d06/toy__memory_8h_1a9b37240f4f85f7a6d6d7834754daffd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API void</type>
        <definition>void Toy_setMemoryAllocator</definition>
        <argsstring>(Toy_MemoryAllocatorFn)</argsstring>
        <name>Toy_setMemoryAllocator</name>
        <param>
          <type><ref refid="df/d06/toy__memory_8h_1a2335482fb6faca377476f53578dc29c5" kindref="member">Toy_MemoryAllocatorFn</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/include/toy_memory.h" line="53" column="14" declfile="common/include/toy_memory.h" declline="53" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOY_MEMORY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_MEMORY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d1d/toy__common_8h" kindref="compound">toy_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_GROW_CAPACITY(capacity)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((capacity)<sp/>&lt;<sp/>8<sp/>?<sp/>8<sp/>:<sp/>(capacity)<sp/>*<sp/>2)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_GROW_CAPACITY_FAST(capacity)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((capacity)<sp/>&lt;<sp/>32<sp/>?<sp/>32<sp/>:<sp/>(capacity)<sp/>*<sp/>2)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_ALLOCATE(type,<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((type*)Toy_reallocate(NULL,<sp/>0,<sp/>sizeof(type)<sp/>*<sp/>(count)))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_FREE(type,<sp/>pointer)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Toy_reallocate(pointer,<sp/>sizeof(type),<sp/>0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_FREE_ARRAY(type,<sp/>pointer,<sp/>oldCount)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Toy_reallocate((type*)pointer,<sp/>sizeof(type)<sp/>*<sp/>(oldCount),<sp/>0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_GROW_ARRAY(type,<sp/>pointer,<sp/>oldCount,<sp/>count)<sp/><sp/><sp/><sp/>(type*)Toy_reallocate((type*)pointer,<sp/>sizeof(type)<sp/>*<sp/>(oldCount),<sp/>sizeof(type)<sp/>*<sp/>(count))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_SHRINK_ARRAY(type,<sp/>pointer,<sp/>oldCount,<sp/>count)<sp/><sp/>(type*)Toy_reallocate((type*)pointer,<sp/>sizeof(type)<sp/>*<sp/>(oldCount),<sp/>sizeof(type)<sp/>*<sp/>(count))<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//implementation<sp/>details</highlight></codeline>
<codeline lineno="34" refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" refkind="member"><highlight class="comment"></highlight><highlight class="normal">TOY_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="df/d06/toy__memory_8h_1aeaee204e8f6c5b37e238c506a9199b9c" kindref="member">Toy_reallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//assign<sp/>the<sp/>memory<sp/>allocator</highlight></codeline>
<codeline lineno="45" refid="df/d06/toy__memory_8h_1a2335482fb6faca377476f53578dc29c5" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*Toy_MemoryAllocatorFn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pointer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="df/d06/toy__memory_8h_1a9b37240f4f85f7a6d6d7834754daffd6" refkind="member"><highlight class="normal">TOY_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="df/d06/toy__memory_8h_1a9b37240f4f85f7a6d6d7834754daffd6" kindref="member">Toy_setMemoryAllocator</ref>(<ref refid="df/d06/toy__memory_8h_1a2335482fb6faca377476f53578dc29c5" kindref="member">Toy_MemoryAllocatorFn</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>TOY_MEMORY_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="common/include/toy_memory.h"/>
  </compounddef>
</doxygen>
