<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="d5/d51/toy__lexer_8h" kind="file" language="C++">
    <compoundname>toy_lexer.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes refid="d7/d1d/toy__common_8h" local="yes">toy_common.h</includes>
    <includes refid="d8/de7/toy__token__types_8h" local="yes">toy_token_types.h</includes>
    <includedby refid="dc/d33/toy__parser_8h" local="yes">toy_parser.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>toy_common.h</label>
        <link refid="d7/d1d/toy__common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>toy_token_types.h</label>
        <link refid="d8/de7/toy__token__types_8h"/>
      </node>
      <node id="1">
        <label>toy_lexer.h</label>
        <link refid="d5/d51/toy__lexer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>toy_lexer.h</label>
        <link refid="d5/d51/toy__lexer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>toy_parser.h</label>
        <link refid="dc/d33/toy__parser_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d9/d6d/structToy__Lexer" prot="public">Toy_Lexer</innerclass>
    <innerclass refid="dd/d78/structToy__Token" prot="public">Toy_Token</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/d51/toy__lexer_8h_1a5bd3c364e00001f1b8d8f89a990efaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API void</type>
        <definition>void Toy_initLexer</definition>
        <argsstring>(Toy_Lexer *lexer, const char *source)</argsstring>
        <name>Toy_initLexer</name>
        <param>
          <type><ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref> *</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Initializes a lexer, binding it to the source parameter; the lexer is now ready to be passed to the parser. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lexer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compiler/include/toy_lexer.h" line="49" column="14" declfile="compiler/include/toy_lexer.h" declline="49" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d5/d51/toy__lexer_8h_1a24053d120e18050dbe1c602ed93373e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API <ref refid="dd/d78/structToy__Token" kindref="compound">Toy_Token</ref></type>
        <definition>Toy_Token Toy_private_scanLexer</definition>
        <argsstring>(Toy_Lexer *lexer)</argsstring>
        <name>Toy_private_scanLexer</name>
        <param>
          <type><ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
<para>@???@ </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lexer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compiler/include/toy_lexer.h" line="58" column="19" declfile="compiler/include/toy_lexer.h" declline="58" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="d5/d51/toy__lexer_8h_1a9f5447f65d7488c7cd65950cac2cbf2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API void</type>
        <definition>void Toy_private_printToken</definition>
        <argsstring>(Toy_Token *token)</argsstring>
        <name>Toy_private_printToken</name>
        <param>
          <type><ref refid="dd/d78/structToy__Token" kindref="compound">Toy_Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>@???@ </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compiler/include/toy_lexer.h" line="67" column="14" declfile="compiler/include/toy_lexer.h" declline="67" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d5/d51/toy__lexer_8h_1a0e43a7cc365f4ed40ff5ce17d22ed093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TOY_API void</type>
        <definition>void Toy_private_setComments</definition>
        <argsstring>(Toy_Lexer *lexer, bool enabled)</argsstring>
        <name>Toy_private_setComments</name>
        <param>
          <type><ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref> *</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>@???@ </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lexer</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="compiler/include/toy_lexer.h" line="76" column="14" declfile="compiler/include/toy_lexer.h" declline="76" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>@???@ </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOY_LEXER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOY_LEXER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d1d/toy__common_8h" kindref="compound">toy_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/de7/toy__token__types_8h" kindref="compound">toy_token_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//lexers<sp/>are<sp/>bound<sp/>to<sp/>a<sp/>string<sp/>of<sp/>code,<sp/>and<sp/>return<sp/>a<sp/>single<sp/>token<sp/>every<sp/>time<sp/>scan<sp/>is<sp/>called</highlight></codeline>
<codeline lineno="21" refid="d9/d6d/structToy__Lexer" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source;</highlight></codeline>
<codeline lineno="23" refid="d9/d6d/structToy__Lexer_1a9fe498f4a7e1eaa3a99a50e06250a649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d6d/structToy__Lexer_1a9fe498f4a7e1eaa3a99a50e06250a649" kindref="member">start</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24" refid="d9/d6d/structToy__Lexer_1a7f055e7647689c7044c0b67d7b8b9986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d6d/structToy__Lexer_1a7f055e7647689c7044c0b67d7b8b9986" kindref="member">current</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25" refid="d9/d6d/structToy__Lexer_1accafbd267b1735f3c2b170aee50b4cce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d9/d6d/structToy__Lexer_1accafbd267b1735f3c2b170aee50b4cce" kindref="member">line</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26" refid="d9/d6d/structToy__Lexer_1ab7eaf031781d077ac1ac816243fbb3b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d6d/structToy__Lexer_1ab7eaf031781d077ac1ac816243fbb3b6" kindref="member">commentsEnabled</ref>;<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//tokens<sp/>are<sp/>intermediaries<sp/>between<sp/>lexers<sp/>and<sp/>parsers</highlight></codeline>
<codeline lineno="35" refid="dd/d78/structToy__Token" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36" refid="dd/d78/structToy__Token_1a0fd8a155621571012e0f3d497245f3f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/de7/toy__token__types_8h_1a2f0b4502e3d37ef79801c9ce7570c09f" kindref="member">Toy_TokenType</ref><sp/><ref refid="dd/d78/structToy__Token_1a0fd8a155621571012e0f3d497245f3f9" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="37" refid="dd/d78/structToy__Token_1a5a6aac13ba9c0b293033b50372a8e2d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="dd/d78/structToy__Token_1a5a6aac13ba9c0b293033b50372a8e2d4" kindref="member">lexeme</ref>;<sp/></highlight></codeline>
<codeline lineno="38" refid="dd/d78/structToy__Token_1a8d1dad08fdb05d0f2974cac93a5f9b70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d78/structToy__Token_1a8d1dad08fdb05d0f2974cac93a5f9b70" kindref="member">length</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39" refid="dd/d78/structToy__Token_1aac880a9aff85b636ab9077144e8a4c34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dd/d78/structToy__Token_1aac880a9aff85b636ab9077144e8a4c34" kindref="member">line</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/><ref refid="dd/d78/structToy__Token" kindref="compound">Toy_Token</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d5/d51/toy__lexer_8h_1a5bd3c364e00001f1b8d8f89a990efaf3" refkind="member"><highlight class="normal">TOY_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d51/toy__lexer_8h_1a5bd3c364e00001f1b8d8f89a990efaf3" kindref="member">Toy_initLexer</ref>(<ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref><sp/>*lexer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*source);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="d5/d51/toy__lexer_8h_1a24053d120e18050dbe1c602ed93373e4" refkind="member"><highlight class="normal">TOY_API<sp/><ref refid="dd/d78/structToy__Token" kindref="compound">Toy_Token</ref><sp/><ref refid="d5/d51/toy__lexer_8h_1a24053d120e18050dbe1c602ed93373e4" kindref="member">Toy_private_scanLexer</ref>(<ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref><sp/>*lexer);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>debugging</highlight></codeline>
<codeline lineno="67" refid="d5/d51/toy__lexer_8h_1a9f5447f65d7488c7cd65950cac2cbf2f" refkind="member"><highlight class="comment"></highlight><highlight class="normal">TOY_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d51/toy__lexer_8h_1a9f5447f65d7488c7cd65950cac2cbf2f" kindref="member">Toy_private_printToken</ref>(<ref refid="dd/d78/structToy__Token" kindref="compound">Toy_Token</ref><sp/>*token);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d5/d51/toy__lexer_8h_1a0e43a7cc365f4ed40ff5ce17d22ed093" refkind="member"><highlight class="normal">TOY_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/d51/toy__lexer_8h_1a0e43a7cc365f4ed40ff5ce17d22ed093" kindref="member">Toy_private_setComments</ref>(<ref refid="d9/d6d/structToy__Lexer" kindref="compound">Toy_Lexer</ref><sp/>*lexer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>TOY_LEXER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="compiler/include/toy_lexer.h"/>
  </compounddef>
</doxygen>
